<?php

namespace App\Controller;

use App\Entity\Product;
use App\Form\ProductType;
use App\Repository\ProductRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/produit", name="product_")
 */
class ProductController extends AbstractController
{
    /**
     * fonction permettant de mettre un article en vente
     * @Route("/Vendre", name="add")
     */
    public function sell(EntityManagerInterface $em, ProductRepository $pr, Request $request)
    {
        $product = new Product();
        $productForm = $this->createForm(ProductType::class, $product);
        $product->setDateCreated(new \DateTime());
        $product->setActive(true);
        $product->setUser($this->getUser());

        $productForm->handleRequest($request);
        if($productForm->isSubmitted() && $productForm->isValid()){
            $photo = $productForm->get('picture')->getData();
            if($photo){
                $photoName = $this->generateUniqueFileName() . '.' . strtolower($photo->getClientOriginalExtension());
                $photo->move(
                    $this->getParameter('upload_photos_product'),
                    $photoName
                );
                $product->setPicture($photoName);
            }else{
                $product->setPicture('default_product_picture.png');
            }

            $em->persist($product);
            $em->flush();
        }

        return $this->render('product/sell.html.twig', [
            "productForm" => $productForm->createView(),
        ]);
    }

    /**
     * MÃ©thode permettant de renvoyer un nom unique pour la photo de profil
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
